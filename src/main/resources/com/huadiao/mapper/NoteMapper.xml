<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.huadiao.mapper.NoteMapper">

    <!--新增笔记-->
    <insert id="insertNewNoteByUid">
        insert into huadiao_note(`note_id`, `uid`, `note_title`, `note_abstract`, `note_content`, `publish_time`)
        values (#{noteId}, #{uid}, #{noteTitle}, #{noteAbstract}, #{noteContent}, now())
        on duplicate key update `modify_date`  = now(),
                                `modify_times` = `modify_times` + 1,
                                `note_title`   = #{noteTitle},
                                `note_content` = #{noteContent};
    </insert>

    <!--新增笔记评论-->
    <insert id="insertNoteCommentByUid">
        insert into huadiao_note_comment(`uid`, `note_id`, `replied_uid`, `author_uid`, `root_comment_id`,
                                         `sub_comment_id`,
                                         `comment_time`, `comment_content`)
        values (#{uid}, #{noteId}, #{replyUid}, #{authorUid}, #{rootCommentId}, #{subCommentId}, now(),
                #{commentContent});
    </insert>

    <!--删除笔记-->
    <delete id="deleteNoteByUidAndNoteId">
        delete
        from huadiao_note
        where `uid` = #{uid}
          and `note_id` = #{noteId};
    </delete>

    <!--删除笔记评论-->
    <delete id="deleteNoteCommentByUid">
        delete
        from huadiao_note_comment
        where `uid` = #{uid}
          and `author_uid` = #{authorUid}
          and `note_id` = #{noteId}
          and `root_comment_id` = #{rootCommentId}
          and `sub_comment_id` = #{subCommentId};
    </delete>

    <resultMap id="singleNoteDtoResultMap" type="com.huadiao.entity.note.Note">
        <result property="noteId" column="note_id"/>
        <result property="noteTitle" column="note_title"/>
        <result property="noteContent" column="note_content"/>
        <result property="publishTime" column="publish_time"/>
        <result property="likeCount" column="like_count"/>
        <result property="viewCount" column="view_count"/>
        <result property="starCount" column="star_count"/>
        <result property="commentCount" column="comment_count"/>
    </resultMap>
    <!--查找笔记-->
    <select id="selectNoteByUidAndNoteId" resultMap="singleNoteDtoResultMap">
        select t1.`uid`,
               t1.`note_id`,
               `note_title`,
               `note_content`,
               `publish_time`,
               count(distinct t2.uid)                                    as `like_count`,
               count(distinct t3.uid)                                    as `view_count`,
               count(distinct t4.uid)                                    as `star_count`,
               count(distinct t2.`root_comment_id`, t2.`sub_comment_id`) as `comment_count`
        from huadiao_note t1
                 left join huadiao_note_like t2 on t1.uid = t2.author_uid and t2.status and t1.`note_id` = t2.`note_id`
                 left join huadiao_note_view t3 on t1.uid = t3.author_uid and t1.`note_id` = t3.`note_id`
                 left join huadiao_note_star t4 on t1.uid = t4.author_uid and t4.status and t1.`note_id` = t4.`note_id`
                 left join huadiao_note_comment t5
                           on t1.uid = t5.author_uid and t5.status and t1.`note_id` = t5.`note_id`
        where t1.`uid` = #{uid}
          and t1.`note_id` = #{noteId};
    </select>

    <!--计数笔记-->
    <select id="countNoteByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note
        where uid = #{uid};
    </select>

    <resultMap id="noteDetailsResultMap" type="com.huadiao.entity.dto.note.ShareNoteDto">
        <result property="noteTitle" column="note_title"/>
        <result property="noteAbstract" column="note_abstract"/>
        <result property="publishTime" column="publish_time"/>
        <result property="noteId" column="note_id"/>
        <result property="likeCount" column="like_count"/>
        <result property="viewCount" column="view_count"/>
        <result property="starCount" column="star_count"/>
        <result property="commentCount" column="comment_count"/>
    </resultMap>
    <!--获取用户全部笔记-->
    <select id="selectAllNoteByUid" resultMap="noteDetailsResultMap">
        select `uid`,
               `note_id`,
               `note_title`,
               `note_abstract`,
               `publish_time`,
               (select count(*)
                from huadiao_note_star t2
                where t1.uid = author_uid
                  and t1.`note_id` = t2.note_id
                  and t2.status)                 as `star_count`,
               (select count(*)
                from huadiao_note_comment t3
                where t1.uid = author_uid
                  and t1.`note_id` = t3.note_id
                  and t3.status)                 as `comment_count`,
               (select count(*)
                from huadiao_note_view t4
                where t1.uid = author_uid
                  and t1.`note_id` = t4.note_id) as `view_count`,
               (select count(*)
                from huadiao_note_like t5
                where t1.uid = author_uid
                  and t1.`note_id` = t5.note_id
                  and t5.status)                 as `like_count`
        from huadiao_note t1
        where `uid` = #{uid}
          and `status`
        order by `publish_time` desc
        limit #{offset}, #{row};
    </select>

    <!--获取笔记喜欢次数-->
    <select id="countNoteLikeByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_like
        where `author_uid` = #{uid}
          and `status`
          and `note_id` = #{noteId};
    </select>

    <!--获取笔记被不喜欢次数-->
    <select id="countNoteUnlikeByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_unlike
        where `author_uid` = #{authorUid}
          and `status`
          and `note_id` = #{noteId};
    </select>

    <!--获取笔记被访问次数-->
    <select id="countNoteViewByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_view
        where `author_uid` = #{authorUid}
          and `note_id` = #{noteId};
    </select>

    <!--判断当前用户是否点赞过某个笔记-->
    <select id="selectMyLikeWithNote" resultType="java.lang.Integer">
        select `uid`
        from huadiao_note_like
        where `note_id` = #{noteId}
          and `author_uid` = #{authorUid}
          and `root_comment_id` = 0
          and `sub_comment_id` = 0
          and `status`
          and `uid` = #{uid};
    </select>

    <!--判断用户是否收藏某个笔记-->
    <select id="selectMyStarWithNote" resultType="java.lang.Integer">
        select `uid`
        from huadiao_note_star
        where `note_id` = #{noteId}
          and `author_uid` = #{authorUid}
          and `status`
          and `uid` = #{uid};
    </select>

    <resultMap id="noteRelationResultMap" type="com.huadiao.entity.dto.note.NoteRelationDto">
        <result property="myLike" column="my_like"/>
        <result property="myUnlike" column="my_unlike"/>
        <result property="myStar" column="my_star"/>
    </resultMap>
    <!--获取用户与笔记的关系-->
    <select id="selectNoteRelationByUidAndNoteId" resultMap="noteRelationResultMap">
        select if(t1.`uid` = #{uid}, 1, 0) as `my_like`,
               if(t2.`uid` = #{uid}, 1, 0) as `my_unlike`,
               if(t3.`uid` = #{uid}, 1, 0) as `my_star`
        from huadiao_note_like t1
                 left join huadiao_note_unlike t2 on t2.author_uid = t1.author_uid and t2.status
                 left join huadiao_note_star t3 on t3.author_uid = t1.author_uid and t3.status
        where t1.`note_id` = #{noteId}
          and t1.`author_uid` = #{authorUid}
          and t1.`status`
          and t1.`uid` = #{uid};
    </select>

    <!--判断当前用户是否不喜欢过某个笔记-->
    <select id="selectMyUnlikeWithNote" resultType="java.lang.Integer">
        select `uid`
        from huadiao_note_unlike
        where `note_id` = #{noteId}
          and `author_uid` = #{authorUid}
          and `status`
          and `uid` = #{uid};
    </select>

    <!--判断作者 uid 是否存在 noteId 的笔记-->
    <select id="judgeNoteExist" resultType="java.lang.Integer">
        select `uid`
        from huadiao_note
        where `uid` = #{uid}
          and `note_id` = #{noteId};
    </select>

    <!--判断笔记是否存在, 查找到返回数字 1, 否则返回 null-->
    <select id="selectExistByNoteIdAndUid" resultType="java.lang.Integer">
        select 1
        from huadiao_note
        where `uid` = #{uid}
          and `note_id` = #{noteId}
    </select>

    <resultMap id="noteCommentResultMap" type="com.huadiao.entity.dto.note.NoteCommentDto">
        <id property="commentId" column="root_comment_id"/>
        <result property="uid" column="uid"/>
        <result property="userId" column="user_id"/>
        <result property="likeCount" column="like_number"/>
        <result property="myLike" column="my_like"/>
        <result property="myUnlike" column="my_unlike"/>
        <result property="commentContent" column="comment_content"/>
        <result property="commentDate" column="comment_time"/>
        <result property="userAvatar" column="user_avatar"/>
        <result property="nickname" column="nickname"/>
        <collection property="commentList" ofType="com.huadiao.entity.dto.note.NoteCommentDto">
            <result property="commentId" column="sub_comment_id"/>
            <result property="uid" column="uid"/>
            <result property="userId" column="user_id"/>
            <result property="likeCount" column="like_number"/>
            <result property="myLike" column="my_like"/>
            <result property="myUnlike" column="my_unlike"/>
            <result property="commentContent" column="comment_content"/>
            <result property="commentDate" column="comment_time"/>
            <result property="userAvatar" column="user_avatar"/>
            <result property="nickname" column="nickname"/>
        </collection>
    </resultMap>
    <!--获取笔记评论-->
    <select id="selectNoteCommentByUid" resultMap="noteCommentResultMap">
        select t1.`uid`,
               t1.`note_id`,
               t1.`root_comment_id`,
               t1.`sub_comment_id`,
               `comment_time`,
               `comment_content`,
               `user_avatar`,
               `nickname`,
               `user_id`,
               if(t3.`uid` = #{uid}, 1, 0) as `my_like`,
               if(t4.`uid` = #{uid}, 1, 0) as `my_unlike`,
               count(t2.uid)               as `like_number`
        from huadiao_note_comment t1
                 left join huadiao_note_like t2 on t2.root_comment_id = t1.root_comment_id and
                                                   t2.author_uid = t1.author_uid and
                                                   (t2.sub_comment_id = t1.sub_comment_id or
                                                    (t2.sub_comment_id = 0 and t1.sub_comment_id = 0)) and
                                                   t2.note_id = t1.note_id and
                                                   t2.status
                 left join huadiao_note_like t3 on t3.uid = #{uid} and
                                                   t3.author_uid = t1.author_uid and
                                                   t3.note_id = t1.note_id and
                                                   t3.root_comment_id = t1.root_comment_id and
                                                   t3.status and
                                                   (t3.sub_comment_id = t1.sub_comment_id or
                                                    (t3.sub_comment_id = 0 and t1.sub_comment_id = 0))
                 left join huadiao_note_comment_unlike t4 on t4.uid = #{uid} and
                                                             t4.author_uid = t1.author_uid and
                                                             t4.note_id = t1.note_id and
                                                             t4.root_comment_id = t1.root_comment_id and
                                                             t4.status and
                                                             (t4.sub_comment_id = t1.sub_comment_id or
                                                              (t4.sub_comment_id = 0 and t1.sub_comment_id = 0))
                 left join huadiao_homepage t5 on t1.`uid` = t5.`uid`
                 left join huadiao_user_info t6 on t1.`uid` = t6.`uid`
                 left join huadiao_user_base t7 on t1.`uid` = t7.`uid`
        where t1.note_id = #{noteId}
          and t1.author_uid = #{authorUid}
          and t1.`status`
          and t1.`id` >= (select `id`
                          from huadiao_note_comment
                          where `author_uid` = #{authorUid}
                            and `status`
                            and `note_id` = #{noteId}
                          limit #{offset}, 1)
        group by t1.`uid`,
                 t1.`note_id`,
                 t1.`root_comment_id`,
                 t1.`sub_comment_id`,
                 `comment_time`,
                 `comment_content`,
                 `my_like`,
                 `my_unlike`
        order by `comment_time` desc
        limit #{row};
    </select>

    <!--获取笔记评论数-->
    <select id="countAllNoteCommentByUidNoteId" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_comment
        where `note_id` = #{noteId}
          and `author_uid` = #{uid}
          and `status`;
    </select>

    <!--判断笔记评论是否存在-->
    <select id="judgeNoteCommentExist" resultType="java.lang.Integer">
        select 1
        from huadiao_note_comment
        where `uid` = #{uid}
          and `author_uid` = #{authorUid}
          and `note_id` = #{noteId}
          and `root_comment_id` = #{rootCommentId}
          and `sub_comment_id` = #{subCommentId}
          and `status`;
    </select>

    <!--获取笔记收藏总数-->
    <select id="selectAllNoteStarCountByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_star
        where `status`
          and `uid` = #{uid};
    </select>

    <!--获取笔记被点赞总数-->
    <select id="selectAllNoteLikeCountByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_like
        where `status`
          and `author_uid` = #{uid};
    </select>

    <!--获取评论被点赞数-->
    <select id="countCommentLikeByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_comment_like
        where `note_id` = #{noteId}
        and `author_uid` = #{uid}
        and `root_comment_id` = #{rootCommentId}
        <choose>
            <when test="subCommentId == null">
                and `sub_comment_id` = 0
            </when>
            <when test="subCommentId != null">
                and `sub_comment_id` = #{subCommentId}
            </when>
        </choose>
    </select>

    <!--查询所有的笔记 id-->
    <select id="selectAllNoteId" resultType="java.lang.Integer">
        select `note_id` from `huadiao_note` where `status`;
    </select>



</mapper>

