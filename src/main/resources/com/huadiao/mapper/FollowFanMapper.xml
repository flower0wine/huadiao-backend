<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.huadiao.mapper.FollowFanMapper">

    <!--新增两人的关系, 可以是重复关注-->
    <insert id="insertRelationByBothUid">
        insert into huadiao_relation(`fan_uid`, `uid`, `group_id`)
        values (#{fanUid}, #{uid}, #{groupId})
        on duplicate key update `status`             = 1,
                                `latest_follow_date` = now(),
                                `group_id`           = #{groupId};
    </insert>

    <!--新增用户关注分组-->
    <insert id="insertFollowGroupByUid">
        insert into huadiao_relation_group(`uid`, `group_id`, `group_name`)
        values (#{uid}, #{groupId}, #{groupName});
    </insert>

    <!--复制到其他分组-->
    <insert id="insertFollowToOtherGroup">
        insert into huadiao_relation(`fan_uid`, `uid`, `group_id`) values
        <foreach collection="list" item="item" separator=",">
            (#{uid}, #{item}, #{groupId})
        </foreach>
        on duplicate key update `status` = 1,
        `latest_follow_date` = now(),
        `group_id` = #{groupId}
    </insert>

    <!--根据两者的 uid 取消关注关系-->
    <update id="deleteRelationByBothUid">
        update huadiao_relation
        set `status` = 0
        where uid = #{uid}
          and fan_uid = #{fanUid};
    </update>

    <!--修改关注分组名称-->
    <update id="modifyFollowGroupNameByUid">
        update huadiao_relation_group
        set `group_name` = #{groupName}
        where `group_id` = #{groupId}
          and `status`
          and `uid` = #{uid};
    </update>

    <!--删除关注分组-->
    <update id="deleteFollowGroupByUid">
        update huadiao_relation_group
        set `status` = 0
        where `group_id` = #{groupId}
          and `uid` = #{uid};
    </update>

    <!--删除我与多人的关系-->
    <delete id="deleteRelation">
        delete from huadiao_relation
        <trim prefix="where" suffixOverrides="and">
            `group_id` = #{groupId} and
            <foreach collection="list" open="(" close=")" separator=" or " item="followerUid">
                (`uid` = #{followerUid} and `fan_uid` = #{uid})
            </foreach>
        </trim>
    </delete>

    <!--获取用户关注和粉丝的数量-->
    <select id="countFollowAndFansByUid" resultType="java.lang.Integer">
        select count(distinct `uid`)
        from huadiao_relation
        where `fan_uid` = #{uid}
          and `status`
        union all
        select count(distinct `fan_uid`)
        from huadiao_relation
        where `uid` = #{uid}
          and `status`;
    </select>

    <resultMap id="followGroupResultMap" type="com.huadiao.entity.followfan.FollowGroup">
        <result property="groupId" column="group_id"/>
        <result property="groupName" column="group_name"/>
        <result property="createDate" column="create_date"/>
        <result property="count" column="count"/>
    </resultMap>
    <!--获取用户关注分组-->
    <select id="selectFollowGroupByUid" resultMap="followGroupResultMap">
        select `group_name`, t1.`group_id`, `create_date`, count(t2.`group_id`) as `count`
        from huadiao_relation_group t1
                 left join huadiao_relation t2
                           on t2.`status` and `fan_uid` = t1.`uid` and t1.`group_id` = t2.`group_id`
        where t1.uid = #{uid}
          and t1.`status`
        group by `group_name`, t1.`group_id`, `create_date`
        order by t1.`group_id`
    </select>

    <resultMap id="followFanResultMap" type="com.huadiao.entity.followfan.FollowFan">
        <result property="userId" column="user_id"/>
        <result property="uid" column="uid"/>
        <result property="canvases" column="canvases"/>
        <result property="userAvatar" column="user_avatar"/>
        <result property="nickname" column="nickname"/>
        <result property="friend" column="friend"/>
        <result property="followTime" column="latest_follow_date"/>
    </resultMap>
    <!--根据分组 id, 获取用户关注-->
    <select id="selectUserFollowByUid" resultMap="followFanResultMap">
        select distinct t1.uid,
               if(t2.uid is null, 0, 1) as `friend`,
               `user_avatar`,
               `canvases`,
               `user_id`,
               `nickname`,
               t1.`latest_follow_date`
        from huadiao_relation t1
                 left join huadiao_relation t2 on t1.`uid` = t2.`fan_uid`
                                                      and t2.`uid` = #{uid}
                                                      and t2.`status`
                 left join huadiao_homepage t3 on t3.uid = t1.uid
                 left join huadiao_user_base t4 on t4.uid = t1.uid
                 left join huadiao_user_info t5 on t5.uid = t1.uid
        where t1.`id` in (
            select `id`
            from (
                     select `id`
                     from huadiao_relation
                     where `fan_uid` = #{uid}
                       and `status`
                        <if test="groupId != null">
                            and `group_id` = #{groupId}
                        </if>
                     limit #{offset}, #{row}
                 ) as subquary
        )
        <if test="groupId != null">
            and t1.`group_id` = #{groupId};
        </if>
    </select>

    <!--获取用户粉丝-->
    <select id="selectUserFanByUid" resultMap="followFanResultMap">
        select distinct t1.`fan_uid` as uid,
                        if(t2.`fan_uid` is null, 0, 1) as `friend`,
                        t3.`user_avatar`,
                        t4.`user_id`,
                        t5.`nickname`,
                        t5.`canvases`,
                        t1.`latest_follow_date`
        from huadiao_relation t1
                 left join huadiao_relation t2 on t1.`fan_uid` = t2.`uid` and t1.`uid` = t2.`fan_uid` and t2.`status`
                 left join huadiao_homepage t3 on t3.uid = t1.fan_uid
                 left join huadiao_user_base t4 on t4.uid = t1.fan_uid
                 left join huadiao_user_info t5 on t5.uid = t1.fan_uid
        where t1.uid = #{uid}
          and t1.`status`
          and t1.`id` >= (select `id` from huadiao_relation where `uid` = #{uid} and `status` order by `id` limit #{offset}, 1)
        limit #{row};
    </select>

    <!--获取关注分组的数量-->
    <select id="countFollowGroupByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_relation_group
        where `status`
          and `uid` = #{uid};
    </select>

    <!--获取两者的关系-->
    <select id="selectRelationByBothUid" resultType="java.lang.Integer">
        select 1
        from huadiao_relation
        where `uid` = #{uid}
          and `fan_uid` = #{otherUid}
          and `status`
        union all
        select 2
        from huadiao_relation
        where `uid` = #{otherUid}
          and `fan_uid` = #{uid}
          and `status`
    </select>

    <!--根据分组 id 获取关注数量-->
    <select id="countFollowByGroupId" resultType="java.lang.Integer">
        select count(*)
        from huadiao_relation
        where `fan_uid` = #{uid}
          and `group_id` = #{groupId}
          and `status`;
    </select>

    <!--获取关注者 uid-->
    <select id="selectFollowerUidByUid" resultType="java.lang.Integer">
        select `uid`
        from huadiao_relation
        where `fan_uid` = #{uid}
          and `status`
          and `group_id` = #{groupId};
    </select>


</mapper>