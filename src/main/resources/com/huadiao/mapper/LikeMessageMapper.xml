<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.huadiao.mapper.LikeMessageMapper">
    <insert id="insertLatestMessage">
        insert into huadiao_note_like_latest_message(`uid`, `author_uid`, `reply_uid`, `replied_uid`,
                                                     `note_id`, `root_comment_id`, `sub_comment_id`)
        values (#{uid},
                #{authorUid},
        <choose>
            <when test="replyUid != null">#{replyUid},</when>
            <otherwise>0,</otherwise>
        </choose>
        <choose>
            <when test="repliedUid != null">#{repliedUid},</when>
            <otherwise>0,</otherwise>
        </choose>
        <choose>
            <when test="rootCommentId != null">#{rootCommentId},</when>
            <otherwise>0,</otherwise>
        </choose>
        <choose>
            <when test="subCommentId != null">#{subCommentId},</when>
            <otherwise>0,</otherwise>
        </choose>
                #{noteId})
    </insert>

    <!--删除点赞笔记消息-->
    <update id="deleteLikeNoteMessage">
        update huadiao_note_like
        set `message_status` = 0
        where `uid` = #{uid}
        and `note_id` = #{noteId}
        and `author_uid` = #{authorUid}
        <choose>
            <when test="replyUid != null">and `reply_uid` = #{replyUid}</when>
            <otherwise>and `reply_uid` = 0</otherwise>
        </choose>
        <choose>
            <when test="repliedUid != null">and `replied_uid` = #{repliedUid}</when>
            <otherwise>and `replied_uid` = 0</otherwise>
        </choose>
        <choose>
            <when test="rootCommentId != null">and `root_comment_id` = #{rootCommentId}</when>
            <otherwise>and `root_comment_id` = 0</otherwise>
        </choose>
        <choose>
            <when test="subCommentId != null">and `sub_comment_id` = #{subCommentId}</when>
            <otherwise>and `sub_comment_id` = 0</otherwise>
        </choose>
        and `status`
        and `message_status`;
    </update>

    <!--删除点赞笔记评论消息-->
    <update id="deleteLikeCommentMessage">
        update huadiao_note_like
        set `message_status` = 0
        where `note_id` = #{noteId}
          and `author_uid` = #{uid}
          and `root_comment_id` = #{rootCommentId}
          and `sub_comment_id` = #{subCommentId}
          and `status`
          and `message_status`;
    </update>

    <delete id="deleteLatestReadMessage">
        delete
        from huadiao_note_like_latest_message
        where (author_uid = #{uid} and reply_uid = 0)
           or reply_uid = #{uid}
    </delete>

    <resultMap id="likeUserResultMap" type="com.huadiao.entity.message.like.LikeMessageUser">
        <result property="uid" column="uid"/>
        <result property="nickname" column="nickname"/>
        <result property="userId" column="user_id"/>
        <result property="avatar" column="user_avatar"/>
        <result property="follow" column="follow"/>
        <result property="fan" column="fan"/>
        <result property="likeTime" column="like_time"/>
    </resultMap>
    <!--获取点赞笔记用户的信息-->
    <select id="selectLikeNoteUser" resultMap="likeUserResultMap">
        select t1.`uid`,
               `nickname`,
               `user_id`,
               `user_avatar`,
               `like_time`,
               if(t5.`uid` = #{uid}, 1, 0)   as `fan`,
               if(t6.`uid` = t1.`uid`, 1, 0) as `follow`
        from huadiao_note_like t1
                 left join huadiao_user_base t2 on t2.`uid` = t1.`uid`
                 left join huadiao_user_info t3 on t3.`uid` = t1.`uid`
                 left join huadiao_homepage t4 on t4.`uid` = t1.`uid`
                 left join huadiao_relation t5 on t5.`fan_uid` = t1.`uid` and t5.`uid` = #{uid} and t5.`status`
                 left join huadiao_relation t6 on t6.`fan_uid` = #{uid} and t6.`uid` = t1.`uid` and t6.`status`
        where t1.`author_uid` = #{uid}
          and `note_id` = #{noteId}
          and t1.`status`
          and t1.`message_status`
          and `root_comment_id` = 0
          and `sub_comment_id` = 0
          and t1.`id` >= (select `id`
                          from huadiao_note_comment_like
                          where `author_uid` = #{uid}
                            and `note_id` = #{noteId}
                            and `root_comment_id` = 0
                            and `sub_comment_id` = 0
                            and `status`
                          limit #{offset}, 1)
        order by `like_time` desc
        limit #{row};
    </select>

    <!--获取点赞笔记评论的用户信息-->
    <select id="selectLikeCommentUser" resultMap="likeUserResultMap">
        select t1.`uid`,
               `nickname`,
               `user_id`,
               `user_avatar`,
               `like_time`,
               if(t5.`uid` = #{uid}, 1, 0)   as `fan`,
               if(t6.`uid` = t1.`uid`, 1, 0) as `follow`
        from huadiao_note_like t1
                 left join huadiao_user_base t2 on t2.`uid` = t1.`uid`
                 left join huadiao_user_info t3 on t3.`uid` = t1.`uid`
                 left join huadiao_homepage t4 on t4.`uid` = t1.`uid`
                 left join huadiao_relation t5 on t5.`fan_uid` = t1.`uid` and t5.`uid` = #{uid} and t5.`status`
                 left join huadiao_relation t6 on t6.`fan_uid` = #{uid} and t6.`uid` = t1.`uid` and t6.`status`
        where t1.`author_uid` = #{uid}
          and `note_id` = #{noteId}
          and t1.`status`
          and t1.`message_status`
          and `root_comment_id` = #{rootCommentId}
          and `sub_comment_id` = #{subCommentId}
          and t1.`id` >= (select `id`
                          from huadiao_note_comment_like
                          where `author_uid` = #{uid}
                            and `note_id` = #{noteId}
                            and `root_comment_id` = #{rootCommentId}
                            and `sub_comment_id` = #{subCommentId}
                            and `status`
                          limit #{offset}, 1)
        order by `like_time` desc
        limit #{row};
    </select>

    <resultMap id="likeNoteMessageResultMap" type="com.huadiao.entity.message.like.LikeMessage">
        <result property="uid" column="uid" />
        <result property="authorUid" column="author_uid" />
        <result property="noteId" column="note_id" />
        <result property="replyUid" column="reply_uid" />
        <result property="repliedUid" column="replied_uid" />
        <result property="rootCommentId" column="root_comment_id" />
        <result property="subCommentId" column="sub_comment_id" />
        <result property="likeTime" column="like_time" />
        <result property="noteTitle" column="note_title" />
        <result property="comment" column="comment_content" />
        <result property="avatar" column="user_avatar" />
        <result property="nickname" column="nickname" />
        <result property="userId" column="user_id" />
    </resultMap>
    <!--获取笔记和评论点赞消息-->
    <select id="selectNoteLikeMessageByUid" resultMap="likeNoteMessageResultMap">
        select t1.`uid`,
               t1.`author_uid`,
               t1.`note_id`,
               t1.`reply_uid`,
               t1.`replied_uid`,
               t1.`root_comment_id`,
               t1.`sub_comment_id`,
               `like_time`,
               `note_title`,
               `comment_content`,
               `user_avatar`,
               `nickname`,
               `user_id`
        from huadiao_note_like t1
                 left join huadiao_note t2 on `author_uid` = t2.`uid`
            and t2.`note_id` = t1.`note_id`
            and t2.`status`
                 left join huadiao_note_comment t3
                           on t1.`root_comment_id` = t3.`root_comment_id`
                               and t1.`sub_comment_id` = t3.`sub_comment_id`
                               and t3.`status`
                 left join huadiao_user_base t4 on t1.`uid` = t4.`uid`
                 left join huadiao_homepage t5 on t1.`uid` = t5.`uid`
                 left join huadiao_user_info t6 on t1.`uid` = t6.`uid`
        where (t1.reply_uid = #{uid} or (t1.reply_uid = 0 and t1.author_uid = #{uid}))
          and t1.`status`
          and t1.`message_status`
          and t1.`id` >= (
            select `id`
            from huadiao_note_like
            where (reply_uid = #{uid} or (reply_uid = 0 and author_uid = #{uid}))
              and `status`
              and `message_status`
            limit #{offset}, 1)
        order by `like_time` desc
        limit #{row};
    </select>

    <!--获取未读消息数量-->
    <select id="countUnreadMessage" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_like t1
                 left join huadiao_note_like_latest_message t2
                           on t1.`author_uid` = t2.`author_uid`
        where t1.`status`
          and (t1.reply_uid = #{uid} or (t1.reply_uid = 0 and t1.author_uid = #{uid}))
          and (t2.id is null or t1.`id` > (
            select max(`id`)
            from huadiao_note_like t3
            where (t3.reply_uid = #{uid} or (t3.reply_uid = 0 and t3.author_uid = #{uid}))
              and t3.`uid` = t2.`uid`
              and t3.`note_id` = t2.`note_id`
              and t3.`root_comment_id` = t2.`root_comment_id`
              and t3.`sub_comment_id` = t2.`sub_comment_id`
              and t3.`replied_uid` = t2.`replied_uid`
              and t3.`status`
              and t3.`message_status`
        ));
    </select>

</mapper>