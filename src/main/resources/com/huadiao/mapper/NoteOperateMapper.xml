<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.huadiao.mapper.NoteOperateMapper">

    <!--新增或者再次收藏笔记-->
    <insert id="insertNoteStarByUid">
        insert into huadiao_note_star(`uid`, `author_uid`, `note_id`, `group_id`)
        values (#{uid}, #{authorUid}, #{noteId}, #{groupId})
        on duplicate key update `status`    = 1,
                                `star_time` = now();
    </insert>

    <!--新增笔记不喜欢-->
    <insert id="insertNoteUnlikeByUid">
        insert into huadiao_note_unlike(`uid`, `author_uid`, `note_id`)
        values (#{uid}, #{authorUid}, #{noteId})
        on duplicate key update `status`      = 1,
                                `unlike_time` = now();
    </insert>

    <!--新增笔记喜欢-->
    <insert id="insertNoteLikeByUid">
        insert into huadiao_note_like(`uid`, `author_uid`, `note_id`)
        values (#{uid}, #{authorUid}, #{noteId})
        on duplicate key update `status`    = 1,
                                `like_time` = now();
    </insert>

    <!--新增笔记评论喜欢-->
    <insert id="insertNoteCommentLike">
        insert into huadiao_note_like(`uid`, `reply_uid`, `replied_uid`, `note_id`, `author_uid`, `root_comment_id`, `sub_comment_id`)
        values (#{uid}, #{replyUid}, #{repliedUid}, #{noteId}, #{authorUid}, #{rootCommentId}, #{subCommentId})
        on duplicate key update `status`    = 1,
                                `like_time` = now();
    </insert>

    <!--新增笔记评论不喜欢-->
    <insert id="insertNoteCommentUnlike">
        insert into huadiao_note_comment_unlike(`uid`, `note_id`, `author_uid`, `root_comment_id`, `sub_comment_id`)
        values (#{uid}, #{noteId}, #{authorUid}, #{rootCommentId}, #{subCommentId})
        on duplicate key update `status`      = 1,
                                `unlike_time` = now();
    </insert>

    <!--举报评论, 自己的评论不能举报-->
    <insert id="insertNoteCommentReport">
        insert into huadiao_note_comment_report(`uid`, `reported_uid`, `note_id`, `author_uid`, `root_comment_id`,
                                                `sub_comment_id`, `report_time`)
        values (#{uid}, #{reportedUid}, #{noteId}, #{authorUid}, #{rootCommentId}, #{subCommentId}, now());
    </insert>

    <!--删除笔记收藏-->
    <update id="deleteNoteStarByUid">
        update huadiao_note_star
        set `status` = 0
        where `uid` = #{uid}
          and `note_id` = #{noteId}
          and `author_uid` = #{authorUid};
    </update>

    <!--删除笔记不喜欢-->
    <update id="deleteNoteUnlikeByUid">
        update huadiao_note_unlike
        set `status` = 0
        where `note_id` = #{noteId}
          and `uid` = #{uid}
          and `author_uid` = #{authorUid};
    </update>

    <!--删除笔记访问记录-->
    <update id="deleteNoteViewByUid">
        update huadiao_note_view
        set `status` = 0
        where `uid` = #{uid}
          and `author_uid` = #{authorUid}
          and `note_id` = #{noteId};
    </update>

    <!--删除笔记点赞-->
    <update id="deleteNoteLikeByUid">
        update huadiao_note_like
        set `status` = 0
        where `uid` = #{uid}
          and `note_id` = #{noteId}
          and `author_uid` = #{authorUid}
          and `root_comment_id` = #{rootCommentId}
          and `sub_comment_id` = #{subCommentId};
    </update>

    <!--删除笔记评论喜欢-->
    <update id="deleteNoteCommentLike">
        update huadiao_note_like
        set `status` = 0
        where `note_id` = #{noteId}
          and `uid` = #{uid}
          and `author_uid` = #{authorUid}
          and `root_comment_id` = #{rootCommentId}
          and `sub_comment_id` = #{subCommentId};
    </update>

    <!--删除笔记评论不喜欢-->
    <update id="deleteNoteCommentUnlike">
        update huadiao_note_comment_unlike
        set `status` = 0
        where `note_id` = #{noteId}
          and `uid` = #{uid}
          and `author_uid` = #{authorUid}
          and `root_comment_id` = #{rootCommentId}
          and `sub_comment_id` = #{subCommentId};
    </update>

    <!--删除笔记评论, 如果是父评论将会删除其下的所有子评论-->
    <update id="deleteNoteCommentByUid">
        update huadiao_note_comment
        set `status`      = 0,
            `delete_uid`  = #{deleteUid},
            `delete_time` = now()
        where `note_id` = #{noteId}
          and `author_uid` = #{authorUid}
          and `root_comment_id` = #{rootCommentId}
          and `sub_comment_id` = #{subCommentId}
          and (`uid` = #{deleteUid} or `author_uid` = #{deleteUid})
          and `status`;
    </update>

    <!--删除用户的所有笔记访问记录-->
    <update id="deleteAllNoteHistoryByUid">
        update `huadiao_note_history`
        set `status` = 0
        where `uid` = #{uid};
    </update>

    <!--删除指定的访问记录-->
    <update id="deleteSpecificNoteHistoryByUid">
        update `huadiao_note_history`
        set `status` = 0
        where `uid` = #{uid}
          and `note_id` = #{noteId};
    </update>

    <!--获取笔记收藏数量-->
    <select id="countNoteStarByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_star
        where `uid` = #{uid}
          and `status`;
    </select>

    <!--获取笔记浏览量-->
    <select id="countNoteViewByUid" resultType="java.lang.Integer">
        select count(*)
        from huadiao_note_view
        where `author_uid` = #{uid}
          and `status`
          and `note_id` = #{noteId};
    </select>

    <resultMap id="noteCommentExistResultMap" type="com.huadiao.dto.note.NoteCommentDTO">
        <result column="uid" property="replyUid"/>
        <result column="replied_uid" property="repliedUid"/>
        <result column="root_comment_id" property="rootCommentId"/>
        <result column="sub_comment_id" property="subCommentId"/>
        <result column="author_uid" property="authorUid"/>
        <result column="note_id" property="noteId"/>
    </resultMap>
    <!--查询笔记评论是否存在-->
    <select id="selectNoteCommentExist" resultMap="noteCommentExistResultMap">
        select `uid`, `replied_uid`, `root_comment_id`, `sub_comment_id`, `author_uid`, `note_id`
        from huadiao_note_comment
        where `note_id` = #{noteId}
          and `author_uid` = #{authorUid}
          and `root_comment_id` = #{rootCommentId}
          and `sub_comment_id` = #{subCommentId}
          and `status`;
    </select>
</mapper>